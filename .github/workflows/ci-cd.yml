name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (e.g., 1.0.0)'
        required: false
        default: ''

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job de CI (Continuous Integration)
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GH_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Clear npm cache
      run: |
        npm cache clean --force
    
    - name: Install dependencies
      run: |
        cd backend
        rm -f package-lock.json
        npm install
    
    - name: Build application
      run: |
        cd backend
        npm run build || echo "No build script found, skipping build step"
  # Job de versionamento
  version:
    name: Version and Tag
    runs-on: ubuntu-latest
    needs: ci
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GH_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Generate version
      id: version
      run: |
        if [ -n "${{ github.event.inputs.version }}" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          # Gerar versão baseada no timestamp
          VERSION="1.0.$(date +%s)"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Generated version: $VERSION"
    
    - name: Update package.json version
      run: |
        cd backend
        npm version ${{ steps.version.outputs.version }} --no-git-tag-version
    
    - name: Commit version changes
      run: |
        git config --local user.email "luiz.riato@outlook.com"
        git config --local user.name "GitHub Action"
        git add backend/package.json backend/package-lock.json
        git commit -m "chore: bump version to ${{ steps.version.outputs.version }}"
        git push

  # Job de build da imagem Docker
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [ci, version]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job de deploy no Render
  deploy:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: [ci, version, build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Get version
      id: version
      run: |
        if [ -n "${{ github.event.inputs.version }}" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="1.0.$(date +%s)"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Update Render environment variables
      run: |
        # Atualizar variáveis de ambiente no Render
        curl -X PATCH "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}" \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{
            "envVars": [
              {
                "key": "NODE_ENV",
                "value": "production"
              },
              {
                "key": "DB_HOST",
                "value": "${{ secrets.DB_HOST }}"
              },
              {
                "key": "DB_PORT",
                "value": "${{ secrets.DB_PORT }}"
              },
              {
                "key": "DB_USER",
                "value": "${{ secrets.DB_USER }}"
              },
              {
                "key": "DB_PASSWORD",
                "value": "${{ secrets.DB_PASSWORD }}"
              },
              {
                "key": "DB_NAME",
                "value": "${{ secrets.DB_NAME }}"
              },
              {
                "key": "BETTERSTACK_SOURCE_TOKEN",
                "value": "${{ secrets.BETTERSTACK_SOURCE_TOKEN }}"
              }
            ]
          }'
    
    - name: Deploy to Render
      run: |
        # Fazer deploy no Render com a nova imagem
        curl -X POST "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys" \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{
            "image": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}"
          }'
    
    - name: Wait for deployment
      run: |
        echo "Waiting for deployment to complete..."
        sleep 60

  # Job de notificação de erro
  notify-error:
    name: Notify on Error
    runs-on: ubuntu-latest
    if: failure()
    needs: [ci, version, build, deploy]
    
    steps:
    - name: Send email notification
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "❌ Pipeline CI/CD Failed - ${{ github.repository }}"
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: ${{ secrets.EMAIL_USERNAME }}
        body: |
          Pipeline CI/CD falhou no repositório ${{ github.repository }}
          
          Commit: ${{ github.sha }}
          Branch: ${{ github.ref }}
          Workflow: ${{ github.workflow }}
          Job: ${{ github.job }}
          
          Veja os detalhes em: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          Detalhes do erro:
          ${{ toJSON(github.event) }} 